主要技术点：

采用GRPC作为通信协议来实现微服务内部及移动端之间的通信
在此基础上采用consul或k8s进行服务注册发现（spring boot不好用，自己实现）
实现grpc的负载均衡（采用GRPC自己的机制）
实现调用链的监控（采用全局的拦截和Meta传递参数实现）
http、grpc互通的调用链，
调用键和日志关联
能否简化GRPC的操作（每个Request 都需要定义，能否采用map<string,string)的方式来实现？返回默认采用json）
android的或js的负载均衡的实现
grpc 网关的监控，流量控制，熔断、降级等
提供protobuf的网关的实现（采用jd的网关实现）

服务循环调用的检测
服务版本等过滤服务处理，有一些服务可能请求老的服务版本，服务版本、类别，组等写consul的 label中

提供http的掊口，采用spring mvc(现在有方案）
提供webflux的http2、websocket的实现（http网关，提高吞吐量）
swagger ui的接口的实现
restful接口的数据格式定义页面和自动生成测试的数据进行自动化接口的测试
数据格式的验证（新的微服务中实现，在接口方法运行前拦截）
生成vuejs的测试数据及其数据格式

服务的本地调用和服务远程调用统一，方便单元测试
每个服务调用的次数、ip等图形化统计
结合spring admin监控微服务的配置、cpu、内存使用的相关数据 
分布式作业管理

vuejs微服务组件化（两种方式）

字典微服务
编码微服务
用户权限微服务
调用链微服务
监控微服务
文件上传、图片处理微服务

设计服务
微服务小组的计划及日志微服务
bug管理微服务
发布微服务
运营微服务
mongode的监控
redis的监控
mq的处理
代码生成

打包成桌面应用

k8s的可伸缩管理（包括nodejs的环境搭建）
服务网络

react native 的处理

微服务的版本管理
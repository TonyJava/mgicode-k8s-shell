apiVersion: v1
kind: Service
metadata:
  name: mongo-shards
  labels:
    app: mongo-shards
spec:
  clusterIP: None
  #type: NodePort 
  ports:
  - port: 27018
    targetPort: 27018
    protocol: TCP
  selector:
    app: mongo-shards

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-shards-config
data:
  entrypoint.sh: |+
    #!/bin/bash     
    set +e                    
         
    mongod   --shardsvr --port 27018  --dbpath /data/db --replSet rs0  &
    sleep 30

    #该分片只有三个节点，如果需要多个修改这里及其它配置部分
    ORDINAL=$(cat /etc/podinfo/pod_name | rev | cut -d- -f1)
     
     #ORDINAL=$(cat /etc/podinfo/pod_name | rev | cut -d- -f1)
          
     IP= $(getent hosts mongo-shards-$ORDINAL.mongo-shards.default.svc.cluster.local)
     echo "nowIP: $IP"

    if [[ $ORDINAL == 2 ]]; then       
       sleep 60
      #主要形成这样的内容的一个js文件
        #mongo --host 10.1.11.124 --port 27018  rs.initiate({ _id :"rs0",
        #members: [{ _id : 0, host : "10.1.11.124:27018" },{ _id : 1, host : "10.1.11.125:27018" },{ _id : 2, host : "10.1.11.126:27018" }]})
    
        content="rs.initiate({_id:\"rs0\",  members: ["       
                
        SERVICE=`/var/run/kubectl describe service/mongo-shards | grep 27018 | grep -i endpoints | awk '{print $2}'` 
        echo "SERVICEIP:$SERVICE "
        
        OLD_IFS="$IFS"  
        IFS=","  
        array=($SERVICE)  
        IFS="$OLD_IFS" 

        i=0;
        mongo_members=" "
        for ip in ${array[*]} ; do  
         echo "$ip ..."
         if [ $i = 0 ]; then
              mongo_members="$mongo_members { _id:$i, host:\"${ip}\" } "
          else
               mongo_members="$mongo_members, { _id:$i, host:\"${ip}\" } "
         fi 

          let i++
        done 
       
        content="$content $mongo_members]});"
     
        echo $content
       
        echo $content > replica_init.js        
        sleep 30
      
        mongo --host 127.0.0.1 --port 27018  < ./replica_init.js
        #tail -f /dev/null
    fi
    wait
   
---


apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: mongo-shards
spec:
  serviceName: mongo-shards
  replicas: 3
  template: 
    metadata:
      name: mongo-shards
      labels:
        app: mongo-shards
    spec:
      containers:
      - name: mongo-shards
        imagePullPolicy: Always
        image: 10.1.11.60:5000/mongo:3.4.4
        command:
          - bash
          - "-c"
          - |
            set -e   
            chmod 777  /conf/entrypoint.sh 
            /conf/entrypoint.sh      
        ports:
        - containerPort: 27018
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /data/db
        - name: conf
          mountPath: /conf
          readOnly: false
        - name: podinfo
          mountPath: /etc/podinfo
          readOnly: false
      volumes:
      - name: mysql-persistent-storage
        emptyDir: {}
      - name: conf
        configMap:
          name: mongo-shards-config
          items: 
          - key: entrypoint.sh  
            path: entrypoint.sh
      - name: podinfo
        downwardAPI:
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
            - path: "annotations"
              fieldRef:
                fieldPath: metadata.annotations
            - path: "pod_name"
              fieldRef:
                fieldPath: metadata.name
            - path: "pod_namespace"
              fieldRef:
                fieldPath: metadata.namespace
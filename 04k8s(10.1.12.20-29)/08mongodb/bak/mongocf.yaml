apiVersion: v1
kind: Service
metadata:
  name: mongo-config
  labels:
    app: mongo-config
spec:
  clusterIP: None
  ports:
  - port: 27019
    targetPort: 27019
    protocol: TCP
  selector:
    app: mongo-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-config-config
data:
  entrypoint.sh: |+
    #!/bin/bash     
    set +e                    
    mongod --configsvr -port 27019 -dbpath /data/db --replSet configReplSet &
    sleep 30

    # until nc -z localhost 27018 ; do ; sleep 1 ; done
    # echo "MongoDB is ready"

     ORDINAL=$(cat /etc/podinfo/pod_name | rev | cut -d- -f1)

     IP= $(getent hosts mongo-config-$ORDINAL.mongo-config.default.svc.cluster.local)
     echo "nowIP: $IP "

    if [[ $ORDINAL == 2 ]]; then       
       sleep 60

       #mongo 10.1.11.118:27019 rs.initiate( { _id: "mongodbconfig", configsvr: true,
       # members: [{ _id: 0, host: "10.1.11.118:27019" },{ _id: 1, host: "10.1.11.119:27019" },{ _id: 2, host: "10.1.11.123:27019" } ]})

        content="rs.initiate({_id:\"configReplSet\", configsvr: true, members: ["       
        mongo_members=" "

        SERVICE=`/var/run/kubectl describe service/mongo-config | grep 27019 | grep -i endpoints | awk '{print $2}'` 
        echo "$SERVICE ..."

        OLD_IFS="$IFS"  
        IFS=","  
        array=($SERVICE)  
        IFS="$OLD_IFS" 
        i=0;
        for ip in ${array[*]}  
        do  
         echo "$ip ..."
         if [ $i = 0 ]; then
            mongo_members="$mongo_members { _id:$i, host:\"${ip}\" } "
          else
            mongo_members="$mongo_members, { _id:$i, host:\"${ip}\" } "
         fi 
          let i++
        done 

        content="$content $mongo_members]});"

        echo $content

        echo $content > replica_init.js        
        sleep 30

        mongo 127.0.0.1:27019 < ./replica_init.js
        #tail -f /dev/null
    fi
     wait
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: mongo-config
spec:
  serviceName: mongo-config
  replicas: 3
  template: 
    metadata:
      name: mongo-config
      labels:
        app: mongo-config
    spec:
      containers:
      - name: mongo-config
        imagePullPolicy: Always
        image: 10.1.11.60:5000/mongo:3.4.4
        command:
          - bash
          - "-c"
          - |
            set -e   
            chmod 777 /conf/entrypoint.sh 
            /conf/entrypoint.sh      
        ports:
        - containerPort: 27019
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /data/db
        - name: conf
          mountPath: /conf
          readOnly: false
        - name: podinfo
          mountPath: /etc/podinfo
          readOnly: false
      volumes:
      - name: mysql-persistent-storage
        emptyDir: {}
      - name: conf
        configMap:
          name: mongo-config-config
          items: 
          - key: entrypoint.sh  
            path: entrypoint.sh
      - name: podinfo
        downwardAPI:
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
            - path: "annotations"
              fieldRef:
                fieldPath: metadata.annotations
            - path: "pod_name"
              fieldRef:
                fieldPath: metadata.name
            - path: "pod_namespace"
              fieldRef:
                fieldPath: metadata.namespace
